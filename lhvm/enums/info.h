#ifndef _INFO_H_
#define _INFO_H_

#include <LHLib/LHTypes.h>

//------------------------------------------------------------------------------------------------------------------------
enum	CITADEL_HEART_INFO
{
	CITADEL_HEART_INFO_NORMAL,
	CITADEL_HEART_INFO_LAST,
};

enum	CREATURE_PEN_INFO
{
	CREATURE_PEN_INFO_FEED,
	CREATURE_PEN_INFO_TRAIN,
	CREATURE_PEN_INFO_SLEEP,
	CREATURE_PEN_INFO_DISCIPLINE,
	CREATURE_PEN_INFO_PLEASURE,
	CREATURE_PEN_INFO_LAST,
};


const ULONG SUB_TYPE_ANY=LH_MAX_ULONG;

enum	CITADEL_INFO
{
	CITADEL_INFO_NORMAL,
	CITADEL_INFO_LAST,
};

enum	FOREST_INFO
{
	FOREST_INFO_NORMAL,
	FOREST_INFO_LAST,
};

enum	RANK_INFO
{
	RANK_INFO_LINE_CENTRE,
	RANK_INFO_LINE_LEFT,
	RANK_INFO_LINE_RIGHT,
	RANK_INFO_LARGE_LINE_LEFT,
	RANK_INFO_LARGE_LINE_RIGHT,
	RANK_INFO_LAST,
};

enum	BALL_INFO
{
	BALL_INFO_NORMAL,
	BALL_INFO_LAST,
};

//PAUL:
enum	PBALL_INFO
{
	PBALL_INFO_NORMAL,
	PBALL_INFO_LAST,
};

/// Matthew: Football
//enum	PFOOTBALL_INFO
//{
//	PFOOTBALL_INFO_NORMAL,
//	PFOOTBALL_INFO_LAST,
//};


enum	POST_INFO
{
	POST_INFO_SIDE_LINE,
	POST_INFO_GOAL,
	POST_INFO_LAST,
};

enum	MOBILE_SHOT_INFO
{
	MOBILE_SHOT_INFO_ARROW,
	MOBILE_SHOT_INFO_LAST,
};

enum	FOOD_TYPE
{
	FOOD_NONE				= 0,
	FOOD_MEAT				= 1,
	FOOD_VEGETABLE			= 2,
	FOOD_GRAZE				= 4,
	FOOD_ANY				= FOOD_MEAT+FOOD_VEGETABLE,
	FOOD_MEAT_VEGETABLE		= FOOD_MEAT+FOOD_VEGETABLE,
	FOOD_VEGETABLE_GRAZE	= FOOD_VEGETABLE+FOOD_GRAZE
};
/*
enum	VILLAGER_JOB
{
	VILLAGER_JOB_NONE,
	VILLAGER_JOB_FISHERMAN,
	VILLAGER_JOB_FIRST = VILLAGER_JOB_FISHERMAN,
	VILLAGER_JOB_FORESTER,
	VILLAGER_JOB_FARMER,
	VILLAGER_JOB_LEADER,
	VILLAGER_JOB_HOUSEWIFE,
	VILLAGER_JOB_TRADER,
	VILLAGER_JOB_LAST
};
*/

//*****************************************************************************
//	Enums needed for the Creature 
//*****************************************************************************
enum OBJECT_TASTINESS
{
	OBJECT_TASTINESS_FOUL,
	OBJECT_TASTINESS_ALRIGHT,
	OBJECT_TASTINESS_NICE
};

enum ATTRIBUTE_VALUE_ALLEGIANCE
{
	ALLEGIANCE_FRIENDLY,
	ALLEGIANCE_ENEMY,
	ALLEGIANCE_ALLY,

	NUM_ALLEGIANCES
};

enum ATTRIBUTE_VALUE_LIFE
{
	LIFE_LOW,
	LIFE_HIGH,

	NUM_LIFE_VALUES
};

enum CREATURE_BELIEF_LIST
{
	CREATURE_BELIEF_LIST_ACTIVITY_OBJECTS,								// For keeping track of large, important objects (towns, other creatures)
	CREATURE_BELIEF_LIST_ACTION_OBJECTS,								// For storing information about small objects (villager, animals, houses)
	CREATURE_BELIEF_LIST_LAST
};

enum ROTATION_DIRECTION
{
	CLOCKWISE,
	ANTI_CLOCKWISE,
	NO_DIRECTION
};


enum LIVING_DANCE_TYPE
{
	LIVING_DANCE_TYPE_LIVING,
	LIVING_DANCE_TYPE_CREATURE
};

enum ORIGIN_TYPE
{
	ORIGIN_TYPE_NATURAL,
	ORIGIN_TYPE_MAN_MADE,
	ORIGIN_TYPE_MAGIC,
	ORIGIN_TYPE_LAST
};


#endif // _INFO_H_