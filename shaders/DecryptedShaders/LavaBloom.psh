ps.2.0

dcl		t0.xyzw
dcl_2d	s0

//
// r0 is (u,v) of the middle pixel.
//

mov		r0,		t0
//mov		r0,		c0.w
//mov		r0.x,	t0.x
//mov		r0.y,	t0.y

#if 0

texld	r0,		r0,		s0
mov		r0,		r0.a
mov		oC0,	r0

#endif


//
// Sample all the pixels and accumulate total into r11
//

add		r1,		r0,		c0
texld	r1,		r1,		s0
mul		r1.a,	r1.a,	c0.z
mul		r1.rgb,	r1,		r1.a
mov		r11,	r1

add		r2,		r0,		c1
texld	r2,		r2,		s0
mul		r2.a,	r2.a,	c1.z
mul		r2.rgb,	r2,		r2.a
add		r11,	r11,	r2

add		r3,		r0,		c2
texld	r3,		r3,		s0
mul		r3.a,	r3.a,	c2.z
mul		r3.rgb,	r3,		r3.a
add		r11,	r11,	r3

add		r4,		r0,		c3
texld	r4,		r4,		s0
mul		r4.a,	r4.a,	c3.z
mul		r4.rgb,	r4,		r4.a
add		r11,	r11,	r4

add		r5,		r0,		c4
texld	r5,		r5,		s0
mul		r5.a,	r5.a,	c4.z
mul		r5.rgb,	r5,		r5.a
add		r11,	r11,	r5

add		r6,		r0,		c5
texld	r6,		r6,		s0
mul		r6.a,	r6.a,	c5.z
mul		r6.rgb,	r6,		r6.a
add		r11,	r11,	r6

add		r7,		r0,		c6
texld	r7,		r7,		s0
mul		r7.a,	r7.a,	c6.z
mul		r7.rgb,	r7,		r7.a
add		r11,	r11,	r7

add		r8,		r0,		c7
texld	r8,		r8,		s0
mul		r8.a,	r8.a,	c7.z
mul		r8.rgb,	r8,		r8.a
add		r11,	r11,	r8

add		r1,		r0,		c8
texld	r1,		r1,		s0
mul		r1.a,	r1.a,	c8.z
mul		r1.rgb,	r1,		r1.a
mov		r11,	r1

add		r2,		r0,		c9
texld	r2,		r2,		s0
mul		r2.a,	r2.a,	c9.z
mul		r2.rgb,	r2,		r2.a
add		r11,	r11,	r2

add		r3,		r0,		c10
texld	r3,		r3,		s0
mul		r3.a,	r3.a,	c10.z
mul		r3.rgb,	r3,		r3.a
add		r11,	r11,	r3

add		r4,		r0,		c11
texld	r4,		r4,		s0
mul		r4.a,	r4.a,	c11.z
mul		r4.rgb,	r4,		r4.a
add		r11,	r11,	r4

add		r5,		r0,		c12
texld	r5,		r5,		s0
mul		r5.a,	r5.a,	c12.z
mul		r5.rgb,	r5,		r5.a
add		r11,	r11,	r5

add		r6,		r0,		c13
texld	r6,		r6,		s0
mul		r6.a,	r6.a,	c13.z
mul		r6.rgb,	r6,		r6.a
add		r11,	r11,	r6

add		r7,		r0,		c14
texld	r7,		r7,		s0
mul		r7.a,	r7.a,	c14.z
mul		r7.rgb,	r7,		r7.a
add		r11,	r11,	r7

//
// Normalise colour.
//

//rcp		r1,		r11.a
//mul		r11.rgb,r11,	r1

//
// And output.
//

mov		oC0,	r11










#if 0

def		c0,  0.25, 0.50,  0.75, 1.00
def		c1,	13.00, 0.04, 0.00, 0.00


/*
mul		r0.x, t0.x, c0.y
mul		r0.y, t0.y, c0.y
texld	r0, r0, s0
mov		oC0, r0
*/




mul		r0.x, t0.x, c0.y
mul		r0.y, t0.y, c0.y
texld	r0, r0, s0		// r0 is accumulated sample.
mul		r0, r0, c1.x	// Full-size sample is more important


mad		r7.x, t0.x, c0.x, c0.y
mul		r7.y, t0.y, c0.x
texld	r7, r7, s0						// 1
add		r0, r0, r7

mad		r1.x, t0.x, c0.x, c0.z
mul		r1.y, t0.y, c0.x
texld   r1, r1, s0						// 2
add     r0, r0, r1


mad		r2.x, t0.x, c0.x, c0.y
mad		r2.y, t0.y, c0.x, c0.x
texld   r2, r2, s0						// 3
add     r0, r0, r2

mad		r3.x, t0.x, c0.x, c0.z
mad		r3.y, t0.y, c0.x, c0.x
texld   r3, r3, s0						// 4
add     r0, r0, r3


mul		r4.x, t0.x, c0.x
mad		r4.y, t0.y, c0.x, c0.y
texld   r4, r4, s0						// 5
add     r0, r0, r4

mad		r5.x, t0.x, c0.x, c0.x
mad		r5.y, t0.y, c0.x, c0.y
texld   r5, r5, s0						// 6
add     r0, r0, r5

mad		r6.x, t0.x, c0.x, c0.y
mad		r6.y, t0.y, c0.x, c0.y
texld   r6, r6, s0						// 7
add     r0, r0, r6

mad		r7.x, t0.x, c0.x, c0.z
mad		r7.y, t0.y, c0.x, c0.y
texld   r7, r7, s0						// 8
add     r0, r0, r7


mul		r1.x, t0.x, c0.x
mad		r1.y, t0.y, c0.x, c0.z
texld   r1, r1, s0						// 9
add     r0, r0, r1

mad		r2.x, t0.x, c0.x, c0.x
mad		r2.y, t0.y, c0.x, c0.z
texld   r2, r2, s0						// 10
add     r0, r0, r2

mad		r3.x, t0.x, c0.x, c0.y
mad		r3.y, t0.y, c0.x, c0.z
texld   r3, r3, s0						// 11
add     r0, r0, r3

mad		r4.x, t0.x, c0.x, c0.z
mad		r4.y, t0.y, c0.x, c0.z
texld   r4, r4, s0						// 12
add     r0, r0, r4



mul		r0, r0, c1.y
mov		oC0, r0


#endif
